name: Build and Deploy Services

on:
  workflow_dispatch:   # ca sa rulez manual din GitHub UI
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - 'client/**'
      - 'k3s/**'

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_WEB: ${{ secrets.DOCKER_USER }}/stayontrack_web
  IMAGE_API: ${{ secrets.DOCKER_USER }}/stayontrack_api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin

      - name: Build web image
        run: docker build -f ./client/Dockerfile.prod -t $IMAGE_WEB:latest ./client 

      - name: Build api image
        run: docker build -f ./server/Dockerfile.prod -t $IMAGE_API:latest ./server

      - name: Push web image
        run: docker push $IMAGE_WEB:latest

      - name: Push api image
        run: docker push $IMAGE_API:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            export CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} 
            export CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

            cd 

            rm -rf StayOnTrack/

            git clone --no-checkout https://github.com/BuscoveanuVictor/StayOnTrack.git
            cd StayOnTrack
            git sparse-checkout init --cone
            git sparse-checkout set k3s

            cd k3s

            kubectl apply -f namespace.yml
            envsubst < google-secrets.yml | kubectl apply -f -
            kubectl apply -f mongo-pvc.yml
            kubectl apply -f db-deployment.yml
            kubectl apply -f api-deployment.yml
            kubectl apply -f api-ingress.yml
            kubectl apply -f web-deployment.yml
            kubectl apply -f web-ingress.yml
             
            kubectl rollout restart deployment stayontrack-web -n stayontrack
            kubectl rollout restart deployment stayontrack-api -n stayontrack